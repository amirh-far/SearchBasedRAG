{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 14, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 79, "column": 0}, "map": {"version":3,"sources":["file:///home/ubuntu/searchBasedRAG/components/chat.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const Chat = registerClientReference(\n    function() { throw new Error(\"Attempted to call Chat() from the server but Chat is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/chat.tsx <module evaluation>\",\n    \"Chat\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,OAAO,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACtC;IAAa,MAAM,IAAI,MAAM;AAAwN,GACrP,qDACA","debugId":null}},
    {"offset": {"line": 87, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 93, "column": 0}, "map": {"version":3,"sources":["file:///home/ubuntu/searchBasedRAG/components/chat.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const Chat = registerClientReference(\n    function() { throw new Error(\"Attempted to call Chat() from the server but Chat is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/chat.tsx\",\n    \"Chat\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,OAAO,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACtC;IAAa,MAAM,IAAI,MAAM;AAAwN,GACrP,iCACA","debugId":null}},
    {"offset": {"line": 101, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 107, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 111, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 122, "column": 0}, "map": {"version":3,"sources":["file:///home/ubuntu/searchBasedRAG/lib/config/models.ts"],"sourcesContent":["import { Model } from '@/lib/types/models'\nimport { headers } from 'next/headers'\nimport defaultModels from './default-models.json'\n\nexport function validateModel(model: any): model is Model {\n  return (\n    typeof model.id === 'string' &&\n    typeof model.name === 'string' &&\n    typeof model.provider === 'string' &&\n    typeof model.providerId === 'string' &&\n    typeof model.enabled === 'boolean' &&\n    (model.toolCallType === 'native' || model.toolCallType === 'manual') &&\n    (model.toolCallModel === undefined ||\n      typeof model.toolCallModel === 'string')\n  )\n}\n\nexport async function getModels(): Promise<Model[]> {\n  try {\n    // Check for BASE_URL environment variable first\n    const baseUrlEnv = process.env.BASE_URL\n    let baseUrlObj: URL\n\n    if (baseUrlEnv) {\n      try {\n        baseUrlObj = new URL(baseUrlEnv)\n        console.log('Using BASE_URL environment variable:', baseUrlEnv)\n      } catch (error) {\n        console.warn(\n          'Invalid BASE_URL environment variable, falling back to headers'\n        )\n        baseUrlObj = await getBaseUrlFromHeaders()\n      }\n    } else {\n      // If BASE_URL is not set, use headers\n      baseUrlObj = await getBaseUrlFromHeaders()\n    }\n\n    // Construct the models.json URL\n    const modelUrl = new URL('/config/models.json', baseUrlObj)\n    console.log('Attempting to fetch models from:', modelUrl.toString())\n\n    try {\n      const response = await fetch(modelUrl, {\n        cache: 'no-store',\n        headers: {\n          Accept: 'application/json'\n        }\n      })\n\n      if (!response.ok) {\n        console.warn(\n          `HTTP error when fetching models: ${response.status} ${response.statusText}`\n        )\n        throw new Error(`HTTP error! status: ${response.status}`)\n      }\n\n      const text = await response.text()\n\n      // Check if the response starts with HTML doctype\n      if (text.trim().toLowerCase().startsWith('<!doctype')) {\n        console.warn('Received HTML instead of JSON when fetching models')\n        throw new Error('Received HTML instead of JSON')\n      }\n\n      const config = JSON.parse(text)\n      if (Array.isArray(config.models) && config.models.every(validateModel)) {\n        console.log('Successfully loaded models from URL')\n        return config.models\n      }\n    } catch (error: any) {\n      // Fallback to default models if fetch fails\n      console.warn(\n        'Fetch failed, falling back to default models:',\n        error.message || 'Unknown error'\n      )\n\n      if (\n        Array.isArray(defaultModels.models) &&\n        defaultModels.models.every(validateModel)\n      ) {\n        console.log('Successfully loaded default models')\n        return defaultModels.models\n      }\n    }\n  } catch (error) {\n    console.warn('Failed to load models:', error)\n  }\n\n  // Last resort: return empty array\n  console.warn('All attempts to load models failed, returning empty array')\n  return []\n}\n\n// Helper function to get base URL from headers\nasync function getBaseUrlFromHeaders(): Promise<URL> {\n  const headersList = await headers()\n  const baseUrl = headersList.get('x-base-url')\n  const url = headersList.get('x-url')\n  const host = headersList.get('x-host')\n  const protocol = headersList.get('x-protocol') || 'http:'\n\n  try {\n    // Try to use the pre-constructed base URL if available\n    if (baseUrl) {\n      return new URL(baseUrl)\n    } else if (url) {\n      return new URL(url)\n    } else if (host) {\n      const constructedUrl = `${protocol}${\n        protocol.endsWith(':') ? '//' : '://'\n      }${host}`\n      return new URL(constructedUrl)\n    } else {\n      return new URL('http://localhost:3000')\n    }\n  } catch (urlError) {\n    // Fallback to default URL if any error occurs during URL construction\n    return new URL('http://localhost:3000')\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 214, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 220, "column": 0}, "map": {"version":3,"sources":["file:///home/ubuntu/searchBasedRAG/app/page.tsx"],"sourcesContent":["import { Chat } from '@/components/chat'\nimport { getModels } from '@/lib/config/models'\nimport { generateId } from 'ai'\n\nexport default async function Page() {\n  const id = generateId()\n  const models = await getModels()\n  return <Chat id={id} models={models} />\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;;AAEe,eAAe;IAC5B,MAAM,KAAK,CAAA,GAAA,wLAAA,CAAA,aAAU,AAAD;IACpB,MAAM,SAAS,MAAM,CAAA,GAAA,uHAAA,CAAA,YAAS,AAAD;IAC7B,qBAAO,8OAAC,mHAAA,CAAA,OAAI;QAAC,IAAI;QAAI,QAAQ;;;;;;AAC/B","debugId":null}},
    {"offset": {"line": 243, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}