{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 52, "column": 0}, "map": {"version":3,"sources":["file:///home/ubuntu/searchBasedRAG/lib/utils/registry.ts"],"sourcesContent":["import { anthropic } from '@ai-sdk/anthropic'\nimport { createAzure } from '@ai-sdk/azure'\nimport { deepseek } from '@ai-sdk/deepseek'\nimport { createFireworks, fireworks } from '@ai-sdk/fireworks'\nimport { google } from '@ai-sdk/google'\nimport { groq } from '@ai-sdk/groq'\nimport { createOpenAI, openai } from '@ai-sdk/openai'\nimport { xai } from '@ai-sdk/xai'\nimport {\n  experimental_createProviderRegistry as createProviderRegistry,\n  extractReasoningMiddleware,\n  wrapLanguageModel\n} from 'ai'\nimport { createOllama } from 'ollama-ai-provider'\n\nexport const registry = createProviderRegistry({\n  openai,\n  anthropic,\n  google,\n  groq,\n  ollama: createOllama({\n    baseURL: `${process.env.OLLAMA_BASE_URL}/api`\n  }),\n  azure: createAzure({\n    apiKey: process.env.AZURE_API_KEY,\n    resourceName: process.env.AZURE_RESOURCE_NAME\n  }),\n  deepseek,\n  fireworks: {\n    ...createFireworks({\n      apiKey: process.env.FIREWORKS_API_KEY\n    }),\n    languageModel: fireworks\n  },\n  'openai-compatible': createOpenAI({\n    apiKey: process.env.OPENAI_COMPATIBLE_API_KEY,\n    baseURL: process.env.OPENAI_COMPATIBLE_API_BASE_URL\n  }),\n  xai\n})\n\nexport function getModel(model: string) {\n  const [provider, ...modelNameParts] = model.split(':') ?? []\n  const modelName = modelNameParts.join(':')\n  if (model.includes('ollama')) {\n    const ollama = createOllama({\n      baseURL: `${process.env.OLLAMA_BASE_URL}/api`\n    })\n\n    // if model is deepseek-r1, add reasoning middleware\n    if (model.includes('deepseek-r1')) {\n      return wrapLanguageModel({\n        model: ollama(modelName),\n        middleware: extractReasoningMiddleware({\n          tagName: 'think'\n        })\n      })\n    }\n\n    // if ollama provider, set simulateStreaming to true\n    return ollama(modelName, {\n      simulateStreaming: true\n    })\n  }\n\n  // if model is groq and includes deepseek-r1, add reasoning middleware\n  if (model.includes('groq') && model.includes('deepseek-r1')) {\n    return wrapLanguageModel({\n      model: groq(modelName),\n      middleware: extractReasoningMiddleware({\n        tagName: 'think'\n      })\n    })\n  }\n\n  // if model is fireworks and includes deepseek-r1, add reasoning middleware\n  if (model.includes('fireworks') && model.includes('deepseek-r1')) {\n    return wrapLanguageModel({\n      model: fireworks(modelName),\n      middleware: extractReasoningMiddleware({\n        tagName: 'think'\n      })\n    })\n  }\n\n  return registry.languageModel(model)\n}\n\nexport function isProviderEnabled(providerId: string): boolean {\n  switch (providerId) {\n    case 'openai':\n      return !!process.env.OPENAI_API_KEY\n    case 'anthropic':\n      return !!process.env.ANTHROPIC_API_KEY\n    case 'google':\n      return !!process.env.GOOGLE_GENERATIVE_AI_API_KEY\n    case 'groq':\n      return !!process.env.GROQ_API_KEY\n    case 'ollama':\n      return !!process.env.OLLAMA_BASE_URL\n    case 'azure':\n      return !!process.env.AZURE_API_KEY && !!process.env.AZURE_RESOURCE_NAME\n    case 'deepseek':\n      return !!process.env.DEEPSEEK_API_KEY\n    case 'fireworks':\n      return !!process.env.FIREWORKS_API_KEY\n    case 'xai':\n      return !!process.env.XAI_API_KEY\n    case 'openai-compatible':\n      return (\n        !!process.env.OPENAI_COMPATIBLE_API_KEY &&\n        !!process.env.OPENAI_COMPATIBLE_API_BASE_URL\n      )\n    default:\n      return false\n  }\n}\n\nexport function getToolCallModel(model?: string) {\n  const [provider, ...modelNameParts] = model?.split(':') ?? []\n  const modelName = modelNameParts.join(':')\n  switch (provider) {\n    case 'deepseek':\n      return getModel('deepseek:deepseek-chat')\n    case 'fireworks':\n      return getModel(\n        'fireworks:accounts/fireworks/models/llama-v3p1-8b-instruct'\n      )\n    case 'groq':\n      return getModel('groq:llama-3.1-8b-instant')\n    case 'ollama':\n      const ollamaModel =\n        process.env.NEXT_PUBLIC_OLLAMA_TOOL_CALL_MODEL || modelName\n      return getModel(`ollama:${ollamaModel}`)\n    case 'google':\n      return getModel('google:gemini-2.0-flash')\n    default:\n      return getModel('openai:gpt-4o-mini')\n  }\n}\n\nexport function isToolCallSupported(model?: string) {\n  const [provider, ...modelNameParts] = model?.split(':') ?? []\n  const modelName = modelNameParts.join(':')\n\n  if (provider === 'ollama') {\n    return false\n  }\n\n  if (provider === 'google') {\n    return false\n  }\n\n  // Deepseek R1 is not supported\n  // Deepseek v3's tool call is unstable, so we include it in the list\n  return !modelName?.includes('deepseek')\n}\n\nexport function isReasoningModel(model: string): boolean {\n  if (typeof model !== 'string') {\n    return false\n  }\n  return (\n    model.includes('deepseek-r1') ||\n    model.includes('deepseek-reasoner') ||\n    model.includes('o3-mini')\n  )\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 210, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 216, "column": 0}, "map": {"version":3,"sources":["file:///home/ubuntu/searchBasedRAG/lib/agents/manual-researcher.ts"],"sourcesContent":["import { CoreMessage, smoothStream, streamText } from 'ai'\nimport { getModel } from '../utils/registry'\n\nconst BASE_SYSTEM_PROMPT = `\nInstructions:\n\nYou are a helpful AI assistant providing accurate information.\n\n1. Provide comprehensive and detailed responses to user questions\n2. Use markdown to structure your responses with appropriate headings\n3. Acknowledge when you are uncertain about specific details\n4. Focus on maintaining high accuracy in your responses\n`\n\nconst SEARCH_ENABLED_PROMPT = `\n${BASE_SYSTEM_PROMPT}\n\nWhen analyzing search results:\n1. Analyze the provided search results carefully to answer the user's question\n2. Always cite sources using the [number](url) format, matching the order of search results\n3. If multiple sources are relevant, include all of them using comma-separated citations\n4. Only use information that has a URL available for citation\n5. If the search results don't contain relevant information, acknowledge this and provide a general response\n\nCitation Format:\n[number](url)\n`\n\nconst SEARCH_DISABLED_PROMPT = `\n${BASE_SYSTEM_PROMPT}\n\nImportant:\n1. Provide responses based on your general knowledge\n2. Be clear about any limitations in your knowledge\n3. Suggest when searching for additional information might be beneficial\n`\n\ninterface ManualResearcherConfig {\n  messages: CoreMessage[]\n  model: string\n  isSearchEnabled?: boolean\n}\n\ntype ManualResearcherReturn = Parameters<typeof streamText>[0]\n\nexport function manualResearcher({\n  messages,\n  model,\n  isSearchEnabled = true\n}: ManualResearcherConfig): ManualResearcherReturn {\n  try {\n    const currentDate = new Date().toLocaleString()\n    const systemPrompt = isSearchEnabled\n      ? SEARCH_ENABLED_PROMPT\n      : SEARCH_DISABLED_PROMPT\n\n    return {\n      model: getModel(model),\n      system: `${systemPrompt}\\nCurrent date and time: ${currentDate}`,\n      messages,\n      temperature: 0.6,\n      topP: 1,\n      topK: 40,\n      experimental_transform: smoothStream({ chunking: 'word' })\n    }\n  } catch (error) {\n    console.error('Error in manualResearcher:', error)\n    throw error\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,MAAM,qBAAqB,CAAC;;;;;;;;;AAS5B,CAAC;AAED,MAAM,wBAAwB,CAAC;AAC/B,EAAE,mBAAmB;;;;;;;;;;;AAWrB,CAAC;AAED,MAAM,yBAAyB,CAAC;AAChC,EAAE,mBAAmB;;;;;;AAMrB,CAAC;AAUM,SAAS,iBAAiB,EAC/B,QAAQ,EACR,KAAK,EACL,kBAAkB,IAAI,EACC;IACvB,IAAI;QACF,MAAM,cAAc,IAAI,OAAO,cAAc;QAC7C,MAAM,eAAe,kBACjB,wBACA;QAEJ,OAAO;YACL,OAAO,CAAA,GAAA,0HAAA,CAAA,WAAQ,AAAD,EAAE;YAChB,QAAQ,GAAG,aAAa,yBAAyB,EAAE,aAAa;YAChE;YACA,aAAa;YACb,MAAM;YACN,MAAM;YACN,wBAAwB,CAAA,GAAA,sJAAA,CAAA,eAAY,AAAD,EAAE;gBAAE,UAAU;YAAO;QAC1D;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,MAAM;IACR;AACF","debugId":null}},
    {"offset": {"line": 274, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 280, "column": 0}, "map": {"version":3,"sources":["file:///home/ubuntu/searchBasedRAG/lib/utils/context-window.ts"],"sourcesContent":["import { CoreMessage } from 'ai'\nimport { Model } from '../types/models'\n\nconst DEFAULT_CONTEXT_WINDOW = 128_000\nconst DEFAULT_RESERVE_TOKENS = 30_000\n\nexport function getMaxAllowedTokens(model: Model): number {\n  let contextWindow: number\n  let reserveTokens: number\n\n  if (model.id.includes('deepseek')) {\n    contextWindow = 64_000\n    reserveTokens = 27_000\n  } else if (model.id.includes('claude')) {\n    contextWindow = 200_000\n    reserveTokens = 40_000\n  } else {\n    contextWindow = DEFAULT_CONTEXT_WINDOW\n    reserveTokens = DEFAULT_RESERVE_TOKENS\n  }\n\n  return contextWindow - reserveTokens\n}\n\nexport function truncateMessages(\n  messages: CoreMessage[],\n  maxTokens: number\n): CoreMessage[] {\n  let totalTokens = 0\n  const tempMessages: CoreMessage[] = []\n\n  for (let i = messages.length - 1; i >= 0; i--) {\n    const message = messages[i]\n    const messageTokens = message.content?.length || 0\n\n    if (totalTokens + messageTokens <= maxTokens) {\n      tempMessages.push(message)\n      totalTokens += messageTokens\n    } else {\n      break\n    }\n  }\n\n  const orderedMessages = tempMessages.reverse()\n\n  while (orderedMessages.length > 0 && orderedMessages[0].role !== 'user') {\n    orderedMessages.shift()\n  }\n\n  return orderedMessages\n}\n"],"names":[],"mappings":";;;;AAGA,MAAM,yBAAyB;AAC/B,MAAM,yBAAyB;AAExB,SAAS,oBAAoB,KAAY;IAC9C,IAAI;IACJ,IAAI;IAEJ,IAAI,MAAM,EAAE,CAAC,QAAQ,CAAC,aAAa;QACjC,gBAAgB;QAChB,gBAAgB;IAClB,OAAO,IAAI,MAAM,EAAE,CAAC,QAAQ,CAAC,WAAW;QACtC,gBAAgB;QAChB,gBAAgB;IAClB,OAAO;QACL,gBAAgB;QAChB,gBAAgB;IAClB;IAEA,OAAO,gBAAgB;AACzB;AAEO,SAAS,iBACd,QAAuB,EACvB,SAAiB;IAEjB,IAAI,cAAc;IAClB,MAAM,eAA8B,EAAE;IAEtC,IAAK,IAAI,IAAI,SAAS,MAAM,GAAG,GAAG,KAAK,GAAG,IAAK;QAC7C,MAAM,UAAU,QAAQ,CAAC,EAAE;QAC3B,MAAM,gBAAgB,QAAQ,OAAO,EAAE,UAAU;QAEjD,IAAI,cAAc,iBAAiB,WAAW;YAC5C,aAAa,IAAI,CAAC;YAClB,eAAe;QACjB,OAAO;YACL;QACF;IACF;IAEA,MAAM,kBAAkB,aAAa,OAAO;IAE5C,MAAO,gBAAgB,MAAM,GAAG,KAAK,eAAe,CAAC,EAAE,CAAC,IAAI,KAAK,OAAQ;QACvE,gBAAgB,KAAK;IACvB;IAEA,OAAO;AACT","debugId":null}},
    {"offset": {"line": 320, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 390, "column": 0}, "map": {"version":3,"sources":["file:///home/ubuntu/searchBasedRAG/lib/redis/config.ts"],"sourcesContent":["import { Redis } from '@upstash/redis'\nimport { createClient, RedisClientType } from 'redis'\n\nexport type RedisConfig = {\n  useLocalRedis: boolean\n  upstashRedisRestUrl?: string\n  upstashRedisRestToken?: string\n  localRedisUrl?: string\n}\n\nexport const redisConfig: RedisConfig = {\n  useLocalRedis: process.env.USE_LOCAL_REDIS === 'true',\n  upstashRedisRestUrl: process.env.UPSTASH_REDIS_REST_URL,\n  upstashRedisRestToken: process.env.UPSTASH_REDIS_REST_TOKEN,\n  localRedisUrl: process.env.LOCAL_REDIS_URL || 'redis://localhost:6379'\n}\n\nlet localRedisClient: RedisClientType | null = null\nlet redisWrapper: RedisWrapper | null = null\n\n// Wrapper class for Redis client\nexport class RedisWrapper {\n  private client: Redis | RedisClientType\n\n  constructor(client: Redis | RedisClientType) {\n    this.client = client\n  }\n\n  async zrange(\n    key: string,\n    start: number,\n    stop: number,\n    options?: { rev: boolean }\n  ): Promise<string[]> {\n    let result: string[]\n    if (this.client instanceof Redis) {\n      result = await this.client.zrange(key, start, stop, options)\n    } else {\n      const redisClient = this.client as RedisClientType\n      if (options?.rev) {\n        result = await redisClient.zRange(key, start, stop, { REV: true })\n      } else {\n        result = await redisClient.zRange(key, start, stop)\n      }\n    }\n    return result\n  }\n\n  async hgetall<T extends Record<string, unknown>>(\n    key: string\n  ): Promise<T | null> {\n    if (this.client instanceof Redis) {\n      return this.client.hgetall(key) as Promise<T | null>\n    } else {\n      const result = await (this.client as RedisClientType).hGetAll(key)\n      return Object.keys(result).length > 0 ? (result as T) : null\n    }\n  }\n\n  pipeline() {\n    return this.client instanceof Redis\n      ? new UpstashPipelineWrapper(this.client.pipeline())\n      : new LocalPipelineWrapper((this.client as RedisClientType).multi())\n  }\n\n  async hmset(key: string, value: Record<string, any>): Promise<'OK' | number> {\n    if (this.client instanceof Redis) {\n      return this.client.hmset(key, value)\n    } else {\n      return (this.client as RedisClientType).hSet(key, value)\n    }\n  }\n\n  async zadd(\n    key: string,\n    score: number,\n    member: string\n  ): Promise<number | null> {\n    if (this.client instanceof Redis) {\n      return this.client.zadd(key, { score, member })\n    } else {\n      return (this.client as RedisClientType).zAdd(key, {\n        score,\n        value: member\n      })\n    }\n  }\n\n  async del(key: string): Promise<number> {\n    if (this.client instanceof Redis) {\n      return this.client.del(key)\n    } else {\n      return (this.client as RedisClientType).del(key)\n    }\n  }\n\n  async zrem(key: string, member: string): Promise<number> {\n    if (this.client instanceof Redis) {\n      return this.client.zrem(key, member)\n    } else {\n      return (this.client as RedisClientType).zRem(key, member)\n    }\n  }\n\n  async close(): Promise<void> {\n    if (this.client instanceof Redis) {\n      // Upstash Redis doesn't require explicit closing\n      return\n    } else {\n      await (this.client as RedisClientType).quit()\n    }\n  }\n}\n\n// Wrapper class for Upstash Redis pipeline\nclass UpstashPipelineWrapper {\n  private pipeline: ReturnType<Redis['pipeline']>\n\n  constructor(pipeline: ReturnType<Redis['pipeline']>) {\n    this.pipeline = pipeline\n  }\n\n  hgetall(key: string) {\n    this.pipeline.hgetall(key)\n    return this\n  }\n\n  del(key: string) {\n    this.pipeline.del(key)\n    return this\n  }\n\n  zrem(key: string, member: string) {\n    this.pipeline.zrem(key, member)\n    return this\n  }\n\n  hmset(key: string, value: Record<string, any>) {\n    this.pipeline.hmset(key, value)\n    return this\n  }\n\n  zadd(key: string, score: number, member: string) {\n    this.pipeline.zadd(key, { score, member })\n    return this\n  }\n\n  async exec() {\n    try {\n      return await this.pipeline.exec()\n    } catch (error) {\n      throw error\n    }\n  }\n}\n\n// Wrapper class for local Redis pipeline\nclass LocalPipelineWrapper {\n  private pipeline: ReturnType<RedisClientType['multi']>\n\n  constructor(pipeline: ReturnType<RedisClientType['multi']>) {\n    this.pipeline = pipeline\n  }\n\n  hgetall(key: string) {\n    this.pipeline.hGetAll(key)\n    return this\n  }\n\n  del(key: string) {\n    this.pipeline.del(key)\n    return this\n  }\n\n  zrem(key: string, member: string) {\n    this.pipeline.zRem(key, member)\n    return this\n  }\n\n  hmset(key: string, value: Record<string, any>) {\n    // Convert all values to strings\n    const stringValue = Object.fromEntries(\n      Object.entries(value).map(([k, v]) => [k, String(v)])\n    )\n    this.pipeline.hSet(key, stringValue)\n    return this\n  }\n\n  zadd(key: string, score: number, member: string) {\n    this.pipeline.zAdd(key, { score, value: member })\n    return this\n  }\n\n  async exec() {\n    try {\n      return await this.pipeline.exec()\n    } catch (error) {\n      throw error\n    }\n  }\n}\n\n// Function to get a Redis client\nexport async function getRedisClient(): Promise<RedisWrapper> {\n  if (redisWrapper) {\n    return redisWrapper\n  }\n\n  if (redisConfig.useLocalRedis) {\n    if (!localRedisClient) {\n      const localRedisUrl =\n        redisConfig.localRedisUrl || 'redis://localhost:6379'\n      try {\n        localRedisClient = createClient({ url: localRedisUrl })\n        await localRedisClient.connect()\n      } catch (error) {\n        if (error instanceof Error) {\n          if (error.message.includes('ECONNREFUSED')) {\n            console.error(\n              `Failed to connect to local Redis at ${localRedisUrl}: Connection refused. Is Redis running?`\n            )\n          } else if (error.message.includes('ETIMEDOUT')) {\n            console.error(\n              `Failed to connect to local Redis at ${localRedisUrl}: Connection timed out. Check your network or Redis server.`\n            )\n          } else if (error.message.includes('ENOTFOUND')) {\n            console.error(\n              `Failed to connect to local Redis at ${localRedisUrl}: Host not found. Check your Redis URL.`\n            )\n          } else {\n            console.error(\n              `Failed to connect to local Redis at ${localRedisUrl}:`,\n              error.message\n            )\n          }\n        } else {\n          console.error(\n            `An unexpected error occurred while connecting to local Redis at ${localRedisUrl}:`,\n            error\n          )\n        }\n        throw new Error(\n          'Failed to connect to local Redis. Check your configuration and ensure Redis is running.'\n        )\n      }\n    }\n    redisWrapper = new RedisWrapper(localRedisClient)\n  } else {\n    if (\n      !redisConfig.upstashRedisRestUrl ||\n      !redisConfig.upstashRedisRestToken\n    ) {\n      throw new Error(\n        'Upstash Redis configuration is missing. Please check your environment variables.'\n      )\n    }\n    try {\n      redisWrapper = new RedisWrapper(\n        new Redis({\n          url: redisConfig.upstashRedisRestUrl,\n          token: redisConfig.upstashRedisRestToken\n        })\n      )\n    } catch (error) {\n      if (error instanceof Error) {\n        if (error.message.includes('unauthorized')) {\n          console.error(\n            'Failed to connect to Upstash Redis: Unauthorized. Check your Upstash Redis token.'\n          )\n        } else if (error.message.includes('not found')) {\n          console.error(\n            'Failed to connect to Upstash Redis: URL not found. Check your Upstash Redis URL.'\n          )\n        } else {\n          console.error('Failed to connect to Upstash Redis:', error.message)\n        }\n      } else {\n        console.error(\n          'An unexpected error occurred while connecting to Upstash Redis:',\n          error\n        )\n      }\n      throw new Error(\n        'Failed to connect to Upstash Redis. Check your configuration and credentials.'\n      )\n    }\n  }\n\n  return redisWrapper\n}\n\n// Function to close the Redis connection\nexport async function closeRedisConnection(): Promise<void> {\n  if (redisWrapper) {\n    await redisWrapper.close()\n    redisWrapper = null\n  }\n  if (localRedisClient) {\n    await localRedisClient.quit()\n    localRedisClient = null\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 629, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 635, "column": 0}, "map": {"version":3,"sources":["file:///home/ubuntu/searchBasedRAG/lib/actions/chat.ts"],"sourcesContent":["'use server'\n\nimport { revalidatePath } from 'next/cache'\nimport { redirect } from 'next/navigation'\nimport { type Chat } from '@/lib/types'\nimport { getRedisClient, RedisWrapper } from '@/lib/redis/config'\n\nasync function getRedis(): Promise<RedisWrapper> {\n  return await getRedisClient()\n}\n\nconst CHAT_VERSION = 'v2'\nfunction getUserChatKey(userId: string) {\n  return `user:${CHAT_VERSION}:chat:${userId}`\n}\n\nexport async function getChats(userId?: string | null) {\n  if (!userId) {\n    return []\n  }\n\n  try {\n    const redis = await getRedis()\n    const chats = await redis.zrange(getUserChatKey(userId), 0, -1, {\n      rev: true\n    })\n\n    if (chats.length === 0) {\n      return []\n    }\n\n    const results = await Promise.all(\n      chats.map(async chatKey => {\n        const chat = await redis.hgetall(chatKey)\n        return chat\n      })\n    )\n\n    return results\n      .filter((result): result is Record<string, any> => {\n        if (result === null || Object.keys(result).length === 0) {\n          return false\n        }\n        return true\n      })\n      .map(chat => {\n        const plainChat = { ...chat }\n        if (typeof plainChat.messages === 'string') {\n          try {\n            plainChat.messages = JSON.parse(plainChat.messages)\n          } catch (error) {\n            plainChat.messages = []\n          }\n        }\n        if (plainChat.createdAt && !(plainChat.createdAt instanceof Date)) {\n          plainChat.createdAt = new Date(plainChat.createdAt)\n        }\n        return plainChat as Chat\n      })\n  } catch (error) {\n    return []\n  }\n}\n\nexport async function getChat(id: string, userId: string = 'anonymous') {\n  const redis = await getRedis()\n  const chat = await redis.hgetall<Chat>(`chat:${id}`)\n\n  if (!chat) {\n    return null\n  }\n\n  // Parse the messages if they're stored as a string\n  if (typeof chat.messages === 'string') {\n    try {\n      chat.messages = JSON.parse(chat.messages)\n    } catch (error) {\n      chat.messages = []\n    }\n  }\n\n  // Ensure messages is always an array\n  if (!Array.isArray(chat.messages)) {\n    chat.messages = []\n  }\n\n  return chat\n}\n\nexport async function clearChats(\n  userId: string = 'anonymous'\n): Promise<{ error?: string }> {\n  const redis = await getRedis()\n  const userChatKey = getUserChatKey(userId)\n  const chats = await redis.zrange(userChatKey, 0, -1)\n  if (!chats.length) {\n    return { error: 'No chats to clear' }\n  }\n  const pipeline = redis.pipeline()\n\n  for (const chat of chats) {\n    pipeline.del(chat)\n    pipeline.zrem(userChatKey, chat)\n  }\n\n  await pipeline.exec()\n\n  revalidatePath('/')\n  redirect('/')\n}\n\nexport async function saveChat(chat: Chat, userId: string = 'anonymous') {\n  try {\n    const redis = await getRedis()\n    const pipeline = redis.pipeline()\n\n    const chatToSave = {\n      ...chat,\n      messages: JSON.stringify(chat.messages)\n    }\n\n    pipeline.hmset(`chat:${chat.id}`, chatToSave)\n    pipeline.zadd(getUserChatKey(userId), Date.now(), `chat:${chat.id}`)\n\n    const results = await pipeline.exec()\n\n    return results\n  } catch (error) {\n    throw error\n  }\n}\n\nexport async function getSharedChat(id: string) {\n  const redis = await getRedis()\n  const chat = await redis.hgetall<Chat>(`chat:${id}`)\n\n  if (!chat || !chat.sharePath) {\n    return null\n  }\n\n  return chat\n}\n\nexport async function shareChat(id: string, userId: string = 'anonymous') {\n  const redis = await getRedis()\n  const chat = await redis.hgetall<Chat>(`chat:${id}`)\n\n  if (!chat || chat.userId !== userId) {\n    return null\n  }\n\n  const payload = {\n    ...chat,\n    sharePath: `/share/${id}`\n  }\n\n  await redis.hmset(`chat:${id}`, payload)\n\n  return payload\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 793, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 799, "column": 0}, "map": {"version":3,"sources":["file:///home/ubuntu/searchBasedRAG/lib/schema/related.tsx"],"sourcesContent":["import { DeepPartial } from 'ai'\nimport { z } from 'zod'\n\nexport const relatedSchema = z.object({\n  items: z\n    .array(\n      z.object({\n        query: z.string()\n      })\n    )\n    .length(3)\n})\nexport type PartialRelated = DeepPartial<typeof relatedSchema>\n\nexport type Related = z.infer<typeof relatedSchema>\n"],"names":[],"mappings":";;;AACA;;AAEO,MAAM,gBAAgB,sIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACpC,OAAO,sIAAA,CAAA,IAAC,CACL,KAAK,CACJ,sIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACP,OAAO,sIAAA,CAAA,IAAC,CAAC,MAAM;IACjB,IAED,MAAM,CAAC;AACZ","debugId":null}},
    {"offset": {"line": 809, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 815, "column": 0}, "map": {"version":3,"sources":["file:///home/ubuntu/searchBasedRAG/lib/agents/generate-related-questions.ts"],"sourcesContent":["import { relatedSchema } from '@/lib/schema/related'\nimport { CoreMessage, generateObject } from 'ai'\nimport {\n  getModel,\n  getToolCallModel,\n  isToolCallSupported\n} from '../utils/registry'\n\nexport async function generateRelatedQuestions(\n  messages: CoreMessage[],\n  model: string\n) {\n  const lastMessages = messages.slice(-1).map(message => ({\n    ...message,\n    role: 'user'\n  })) as CoreMessage[]\n\n  const supportedModel = isToolCallSupported(model)\n  const currentModel = supportedModel\n    ? getModel(model)\n    : getToolCallModel(model)\n\n  const result = await generateObject({\n    model: currentModel,\n    system: `As a professional web researcher, your task is to generate a set of three queries that explore the subject matter more deeply, building upon the initial query and the information uncovered in its search results.\n\n    For instance, if the original query was \"Starship's third test flight key milestones\", your output should follow this format:\n\n    Aim to create queries that progressively delve into more specific aspects, implications, or adjacent topics related to the initial query. The goal is to anticipate the user's potential information needs and guide them towards a more comprehensive understanding of the subject matter.\n    Please match the language of the response to the user's language.`,\n    messages: lastMessages,\n    schema: relatedSchema\n  })\n\n  return result\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAMO,eAAe,yBACpB,QAAuB,EACvB,KAAa;IAEb,MAAM,eAAe,SAAS,KAAK,CAAC,CAAC,GAAG,GAAG,CAAC,CAAA,UAAW,CAAC;YACtD,GAAG,OAAO;YACV,MAAM;QACR,CAAC;IAED,MAAM,iBAAiB,CAAA,GAAA,0HAAA,CAAA,sBAAmB,AAAD,EAAE;IAC3C,MAAM,eAAe,iBACjB,CAAA,GAAA,0HAAA,CAAA,WAAQ,AAAD,EAAE,SACT,CAAA,GAAA,0HAAA,CAAA,mBAAgB,AAAD,EAAE;IAErB,MAAM,SAAS,MAAM,CAAA,GAAA,sJAAA,CAAA,iBAAc,AAAD,EAAE;QAClC,OAAO;QACP,QAAQ,CAAC;;;;;qEAKwD,CAAC;QAClE,UAAU;QACV,QAAQ,2HAAA,CAAA,gBAAa;IACvB;IAEA,OAAO;AACT","debugId":null}},
    {"offset": {"line": 844, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 850, "column": 0}, "map": {"version":3,"sources":["file:///home/ubuntu/searchBasedRAG/lib/utils/index.ts"],"sourcesContent":["import { type Model } from '@/lib/types/models'\nimport {\n  convertToCoreMessages,\n  CoreMessage,\n  CoreToolMessage,\n  generateId,\n  JSONValue,\n  Message,\n  ToolInvocation\n} from 'ai'\nimport { type ClassValue, clsx } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\nimport { ExtendedCoreMessage } from '../types'\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\n/**\n * Takes an array of AIMessage and modifies each message where the role is 'tool'.\n * Changes the role to 'assistant' and converts the content to a JSON string.\n * Returns the modified messages as an array of CoreMessage.\n *\n * @param aiMessages - Array of AIMessage\n * @returns modifiedMessages - Array of modified messages\n */\nexport function transformToolMessages(messages: CoreMessage[]): CoreMessage[] {\n  return messages.map(message =>\n    message.role === 'tool'\n      ? {\n          ...message,\n          role: 'assistant',\n          content: JSON.stringify(message.content),\n          type: 'tool'\n        }\n      : message\n  ) as CoreMessage[]\n}\n\n/**\n * Sanitizes a URL by replacing spaces with '%20'\n * @param url - The URL to sanitize\n * @returns The sanitized URL\n */\nexport function sanitizeUrl(url: string): string {\n  return url.replace(/\\s+/g, '%20')\n}\n\nexport function createModelId(model: Model): string {\n  return `${model.providerId}:${model.id}`\n}\n\nexport function getDefaultModelId(models: Model[]): string {\n  if (!models.length) {\n    throw new Error('No models available')\n  }\n  return createModelId(models[0])\n}\n\nfunction addToolMessageToChat({\n  toolMessage,\n  messages\n}: {\n  toolMessage: CoreToolMessage\n  messages: Array<Message>\n}): Array<Message> {\n  return messages.map(message => {\n    if (message.toolInvocations) {\n      return {\n        ...message,\n        toolInvocations: message.toolInvocations.map(toolInvocation => {\n          const toolResult = toolMessage.content.find(\n            tool => tool.toolCallId === toolInvocation.toolCallId\n          )\n\n          if (toolResult) {\n            return {\n              ...toolInvocation,\n              state: 'result',\n              result: toolResult.result\n            }\n          }\n\n          return toolInvocation\n        })\n      }\n    }\n\n    return message\n  })\n}\n\nexport function convertToUIMessages(\n  messages: Array<ExtendedCoreMessage>\n): Array<Message> {\n  let pendingAnnotations: JSONValue[] = []\n  let pendingReasoning: string | undefined = undefined\n  let pendingReasoningTime: number | undefined = undefined\n\n  return messages.reduce((chatMessages: Array<Message>, message) => {\n    // Handle tool messages\n    if (message.role === 'tool') {\n      return addToolMessageToChat({\n        toolMessage: message as CoreToolMessage,\n        messages: chatMessages\n      })\n    }\n\n    // Data messages are used to capture annotations, including reasoning.\n    if (message.role === 'data') {\n      if (\n        message.content !== null &&\n        message.content !== undefined &&\n        typeof message.content !== 'string'\n      ) {\n        const content = message.content as JSONValue\n        if (\n          content &&\n          typeof content === 'object' &&\n          'type' in content &&\n          'data' in content\n        ) {\n          if (content.type === 'reasoning') {\n            // If content.data is an object, capture its reasoning and time;\n            // otherwise treat it as a simple string.\n            if (typeof content.data === 'object' && content.data !== null) {\n              pendingReasoning = (content.data as any).reasoning\n              pendingReasoningTime = (content.data as any).time\n            } else {\n              pendingReasoning = content.data as string\n              pendingReasoningTime = 0\n            }\n          } else {\n            pendingAnnotations.push(content)\n          }\n        }\n      }\n      return chatMessages\n    }\n\n    // Build the text content and tool invocations from message.content.\n    let textContent = ''\n    let toolInvocations: Array<ToolInvocation> = []\n\n    if (message.content) {\n      if (typeof message.content === 'string') {\n        textContent = message.content\n      } else if (Array.isArray(message.content)) {\n        for (const content of message.content) {\n          if (content && typeof content === 'object' && 'type' in content) {\n            if (content.type === 'text' && 'text' in content) {\n              textContent += content.text\n            } else if (\n              content.type === 'tool-call' &&\n              'toolCallId' in content &&\n              'toolName' in content &&\n              'args' in content\n            ) {\n              toolInvocations.push({\n                state: 'call',\n                toolCallId: content.toolCallId,\n                toolName: content.toolName,\n                args: content.args\n              } as ToolInvocation)\n            }\n          }\n        }\n      }\n    }\n\n    // For assistant messages, assemble annotations from any stashed data.\n    let annotations: JSONValue[] | undefined = undefined\n    if (message.role === 'assistant') {\n      if (pendingAnnotations.length > 0 || pendingReasoning !== undefined) {\n        annotations = [\n          ...pendingAnnotations,\n          ...(pendingReasoning !== undefined\n            ? [\n                {\n                  type: 'reasoning',\n                  data: {\n                    reasoning: pendingReasoning,\n                    time: pendingReasoningTime ?? 0\n                  }\n                }\n              ]\n            : [])\n        ]\n      }\n    }\n\n    // Create the new message. Note: we do not include a top-level \"reasoning\" property.\n    const newMessage: Message = {\n      id: generateId(),\n      role: message.role,\n      content: textContent,\n      toolInvocations: toolInvocations.length > 0 ? toolInvocations : undefined,\n      annotations: annotations\n    }\n\n    chatMessages.push(newMessage)\n\n    // Clear pending state after processing an assistant message.\n    if (message.role === 'assistant') {\n      pendingAnnotations = []\n      pendingReasoning = undefined\n      pendingReasoningTime = undefined\n    }\n\n    return chatMessages\n  }, [])\n}\n\nexport function convertToExtendedCoreMessages(\n  messages: Message[]\n): ExtendedCoreMessage[] {\n  const result: ExtendedCoreMessage[] = []\n\n  for (const message of messages) {\n    // Convert annotations to data messages\n    if (message.annotations && message.annotations.length > 0) {\n      message.annotations.forEach(annotation => {\n        result.push({\n          role: 'data',\n          content: annotation\n        })\n      })\n    }\n\n    // Convert reasoning to data message with unified structure (including time)\n    if (message.reasoning) {\n      const reasoningTime = (message as any).reasoningTime ?? 0\n      const reasoningData =\n        typeof message.reasoning === 'string'\n          ? { reasoning: message.reasoning, time: reasoningTime }\n          : {\n              ...(message.reasoning as Record<string, unknown>),\n              time:\n                (message as any).reasoningTime ??\n                (message.reasoning as any).time ??\n                0\n            }\n      result.push({\n        role: 'data',\n        content: {\n          type: 'reasoning',\n          data: reasoningData\n        } as JSONValue\n      })\n    }\n\n    // Convert current message\n    const converted = convertToCoreMessages([message])\n    result.push(...converted)\n  }\n\n  return result\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1041, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1047, "column": 0}, "map": {"version":3,"sources":["file:///home/ubuntu/searchBasedRAG/lib/streaming/handle-stream-finish.ts"],"sourcesContent":["import { getChat, saveChat } from '@/lib/actions/chat'\nimport { generateRelatedQuestions } from '@/lib/agents/generate-related-questions'\nimport { ExtendedCoreMessage } from '@/lib/types'\nimport { convertToExtendedCoreMessages } from '@/lib/utils'\nimport { CoreMessage, DataStreamWriter, JSONValue, Message } from 'ai'\n\ninterface HandleStreamFinishParams {\n  responseMessages: CoreMessage[]\n  originalMessages: Message[]\n  model: string\n  chatId: string\n  dataStream: DataStreamWriter\n  skipRelatedQuestions?: boolean\n  annotations?: ExtendedCoreMessage[]\n}\n\nexport async function handleStreamFinish({\n  responseMessages,\n  originalMessages,\n  model,\n  chatId,\n  dataStream,\n  skipRelatedQuestions = false,\n  annotations = []\n}: HandleStreamFinishParams) {\n  try {\n    const extendedCoreMessages = convertToExtendedCoreMessages(originalMessages)\n    let allAnnotations = [...annotations]\n\n    if (!skipRelatedQuestions) {\n      // Notify related questions loading\n      const relatedQuestionsAnnotation: JSONValue = {\n        type: 'related-questions',\n        data: { items: [] }\n      }\n      dataStream.writeMessageAnnotation(relatedQuestionsAnnotation)\n\n      // Generate related questions\n      const relatedQuestions = await generateRelatedQuestions(\n        responseMessages,\n        model\n      )\n\n      // Create and add related questions annotation\n      const updatedRelatedQuestionsAnnotation: ExtendedCoreMessage = {\n        role: 'data',\n        content: {\n          type: 'related-questions',\n          data: relatedQuestions.object\n        } as JSONValue\n      }\n\n      dataStream.writeMessageAnnotation(\n        updatedRelatedQuestionsAnnotation.content as JSONValue\n      )\n      allAnnotations.push(updatedRelatedQuestionsAnnotation)\n    }\n\n    // Create the message to save\n    const generatedMessages = [\n      ...extendedCoreMessages,\n      ...responseMessages.slice(0, -1),\n      ...allAnnotations, // Add annotations before the last message\n      ...responseMessages.slice(-1)\n    ] as ExtendedCoreMessage[]\n\n    if (process.env.ENABLE_SAVE_CHAT_HISTORY !== 'true') {\n      return\n    }\n\n    // Get the chat from the database if it exists, otherwise create a new one\n    const savedChat = (await getChat(chatId)) ?? {\n      messages: [],\n      createdAt: new Date(),\n      userId: 'anonymous',\n      path: `/search/${chatId}`,\n      title: originalMessages[0].content,\n      id: chatId\n    }\n\n    // Save chat with complete response and related questions\n    await saveChat({\n      ...savedChat,\n      messages: generatedMessages\n    }).catch(error => {\n      console.error('Failed to save chat:', error)\n      throw new Error('Failed to save chat history')\n    })\n  } catch (error) {\n    console.error('Error in handleStreamFinish:', error)\n    throw error\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AAEA;;;;AAaO,eAAe,mBAAmB,EACvC,gBAAgB,EAChB,gBAAgB,EAChB,KAAK,EACL,MAAM,EACN,UAAU,EACV,uBAAuB,KAAK,EAC5B,cAAc,EAAE,EACS;IACzB,IAAI;QACF,MAAM,uBAAuB,CAAA,GAAA,uHAAA,CAAA,gCAA6B,AAAD,EAAE;QAC3D,IAAI,iBAAiB;eAAI;SAAY;QAErC,IAAI,CAAC,sBAAsB;YACzB,mCAAmC;YACnC,MAAM,6BAAwC;gBAC5C,MAAM;gBACN,MAAM;oBAAE,OAAO,EAAE;gBAAC;YACpB;YACA,WAAW,sBAAsB,CAAC;YAElC,6BAA6B;YAC7B,MAAM,mBAAmB,MAAM,CAAA,GAAA,mJAAA,CAAA,2BAAwB,AAAD,EACpD,kBACA;YAGF,8CAA8C;YAC9C,MAAM,oCAAyD;gBAC7D,MAAM;gBACN,SAAS;oBACP,MAAM;oBACN,MAAM,iBAAiB,MAAM;gBAC/B;YACF;YAEA,WAAW,sBAAsB,CAC/B,kCAAkC,OAAO;YAE3C,eAAe,IAAI,CAAC;QACtB;QAEA,6BAA6B;QAC7B,MAAM,oBAAoB;eACrB;eACA,iBAAiB,KAAK,CAAC,GAAG,CAAC;eAC3B;eACA,iBAAiB,KAAK,CAAC,CAAC;SAC5B;QAED,IAAI,QAAQ,GAAG,CAAC,wBAAwB,KAAK,QAAQ;YACnD;QACF;QAEA,0EAA0E;QAC1E,MAAM,YAAY,AAAC,MAAM,CAAA,GAAA,wHAAA,CAAA,UAAO,AAAD,EAAE,WAAY;YAC3C,UAAU,EAAE;YACZ,WAAW,IAAI;YACf,QAAQ;YACR,MAAM,CAAC,QAAQ,EAAE,QAAQ;YACzB,OAAO,gBAAgB,CAAC,EAAE,CAAC,OAAO;YAClC,IAAI;QACN;QAEA,yDAAyD;QACzD,MAAM,CAAA,GAAA,wHAAA,CAAA,WAAQ,AAAD,EAAE;YACb,GAAG,SAAS;YACZ,UAAU;QACZ,GAAG,KAAK,CAAC,CAAA;YACP,QAAQ,KAAK,CAAC,wBAAwB;YACtC,MAAM,IAAI,MAAM;QAClB;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,MAAM;IACR;AACF","debugId":null}},
    {"offset": {"line": 1116, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1122, "column": 0}, "map": {"version":3,"sources":["file:///home/ubuntu/searchBasedRAG/lib/schema/search.tsx"],"sourcesContent":["import { DeepPartial } from 'ai'\nimport { z } from 'zod'\n\nexport const searchSchema = z.object({\n  query: z.string().describe('The query to search for'),\n  max_results: z\n    .number()\n    .describe('The maximum number of results to return. default is 20'),\n  search_depth: z\n    .string()\n    .describe(\n      'The depth of the search. Allowed values are \"basic\" or \"advanced\"'\n    ),\n  include_domains: z\n    .array(z.string())\n    .describe(\n      'A list of domains to specifically include in the search results. Default is None, which includes all domains.'\n    ),\n  exclude_domains: z\n    .array(z.string())\n    .describe(\n      \"A list of domains to specifically exclude from the search results. Default is None, which doesn't exclude any domains.\"\n    )\n})\n\nexport type PartialInquiry = DeepPartial<typeof searchSchema>\n"],"names":[],"mappings":";;;AACA;;AAEO,MAAM,eAAe,sIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACnC,OAAO,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC3B,aAAa,sIAAA,CAAA,IAAC,CACX,MAAM,GACN,QAAQ,CAAC;IACZ,cAAc,sIAAA,CAAA,IAAC,CACZ,MAAM,GACN,QAAQ,CACP;IAEJ,iBAAiB,sIAAA,CAAA,IAAC,CACf,KAAK,CAAC,sIAAA,CAAA,IAAC,CAAC,MAAM,IACd,QAAQ,CACP;IAEJ,iBAAiB,sIAAA,CAAA,IAAC,CACf,KAAK,CAAC,sIAAA,CAAA,IAAC,CAAC,MAAM,IACd,QAAQ,CACP;AAEN","debugId":null}},
    {"offset": {"line": 1134, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1180, "column": 0}, "map": {"version":3,"sources":["file:///home/ubuntu/searchBasedRAG/lib/tools/search.ts"],"sourcesContent":["import { searchSchema } from '@/lib/schema/search'\nimport {\n  SearchResultImage,\n  SearchResultItem,\n  SearchResults,\n  SearXNGResponse,\n  SearXNGResult\n} from '@/lib/types'\nimport { sanitizeUrl } from '@/lib/utils'\nimport { tool } from 'ai'\nimport Exa from 'exa-js'\n\nexport const searchTool = tool({\n  description: 'Search the web for information',\n  parameters: searchSchema,\n  execute: async ({\n    query,\n    max_results,\n    search_depth,\n    include_domains,\n    exclude_domains\n  }) => {\n    // Tavily API requires a minimum of 5 characters in the query\n    const filledQuery =\n      query.length < 5 ? query + ' '.repeat(5 - query.length) : query\n    let searchResult: SearchResults\n    const searchAPI =\n      (process.env.SEARCH_API as 'tavily' | 'exa' | 'searxng') || 'tavily'\n\n    const effectiveSearchDepth =\n      searchAPI === 'searxng' &&\n      process.env.SEARXNG_DEFAULT_DEPTH === 'advanced'\n        ? 'advanced'\n        : search_depth || 'basic'\n\n    console.log(\n      `Using search API: ${searchAPI}, Search Depth: ${effectiveSearchDepth}`\n    )\n\n    try {\n      if (searchAPI === 'searxng' && effectiveSearchDepth === 'advanced') {\n        // API route for advanced SearXNG search\n        const baseUrl =\n          process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'\n        const response = await fetch(`${baseUrl}/api/advanced-search`, {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            query: filledQuery,\n            maxResults: max_results,\n            searchDepth: effectiveSearchDepth,\n            includeDomains: include_domains,\n            excludeDomains: exclude_domains\n          })\n        })\n        if (!response.ok) {\n          throw new Error(\n            `Advanced search API error: ${response.status} ${response.statusText}`\n          )\n        }\n        searchResult = await response.json()\n      } else {\n        searchResult = await (searchAPI === 'tavily'\n          ? tavilySearch\n          : searchAPI === 'exa'\n          ? exaSearch\n          : searxngSearch)(\n          filledQuery,\n          max_results,\n          effectiveSearchDepth === 'advanced' ? 'advanced' : 'basic',\n          include_domains,\n          exclude_domains\n        )\n      }\n    } catch (error) {\n      console.error('Search API error:', error)\n      searchResult = {\n        results: [],\n        query: filledQuery,\n        images: [],\n        number_of_results: 0\n      }\n    }\n\n    console.log('completed search')\n    return searchResult\n  }\n})\n\nexport async function search(\n  query: string,\n  maxResults: number = 10,\n  searchDepth: 'basic' | 'advanced' = 'basic',\n  includeDomains: string[] = [],\n  excludeDomains: string[] = []\n): Promise<SearchResults> {\n  return searchTool.execute(\n    {\n      query,\n      max_results: maxResults,\n      search_depth: searchDepth,\n      include_domains: includeDomains,\n      exclude_domains: excludeDomains\n    },\n    {\n      toolCallId: 'search',\n      messages: []\n    }\n  )\n}\n\nasync function tavilySearch(\n  query: string,\n  maxResults: number = 10,\n  searchDepth: 'basic' | 'advanced' = 'basic',\n  includeDomains: string[] = [],\n  excludeDomains: string[] = []\n): Promise<SearchResults> {\n  const apiKey = process.env.TAVILY_API_KEY\n  if (!apiKey) {\n    throw new Error('TAVILY_API_KEY is not set in the environment variables')\n  }\n  const includeImageDescriptions = true\n  const response = await fetch('https://api.tavily.com/search', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      api_key: apiKey,\n      query,\n      max_results: Math.max(maxResults, 5),\n      search_depth: searchDepth,\n      include_images: true,\n      include_image_descriptions: includeImageDescriptions,\n      include_answers: true,\n      include_domains: includeDomains,\n      exclude_domains: excludeDomains\n    })\n  })\n\n  if (!response.ok) {\n    throw new Error(\n      `Tavily API error: ${response.status} ${response.statusText}`\n    )\n  }\n\n  const data = await response.json()\n  const processedImages = includeImageDescriptions\n    ? data.images\n        .map(({ url, description }: { url: string; description: string }) => ({\n          url: sanitizeUrl(url),\n          description\n        }))\n        .filter(\n          (\n            image: SearchResultImage\n          ): image is { url: string; description: string } =>\n            typeof image === 'object' &&\n            image.description !== undefined &&\n            image.description !== ''\n        )\n    : data.images.map((url: string) => sanitizeUrl(url))\n\n  return {\n    ...data,\n    images: processedImages\n  }\n}\n\nasync function exaSearch(\n  query: string,\n  maxResults: number = 10,\n  _searchDepth: string,\n  includeDomains: string[] = [],\n  excludeDomains: string[] = []\n): Promise<SearchResults> {\n  const apiKey = process.env.EXA_API_KEY\n  if (!apiKey) {\n    throw new Error('EXA_API_KEY is not set in the environment variables')\n  }\n\n  const exa = new Exa(apiKey)\n  const exaResults = await exa.searchAndContents(query, {\n    highlights: true,\n    numResults: maxResults,\n    includeDomains,\n    excludeDomains\n  })\n\n  return {\n    results: exaResults.results.map((result: any) => ({\n      title: result.title,\n      url: result.url,\n      content: result.highlight || result.text\n    })),\n    query,\n    images: [],\n    number_of_results: exaResults.results.length\n  }\n}\n\nasync function searxngSearch(\n  query: string,\n  maxResults: number = 10,\n  searchDepth: string,\n  includeDomains: string[] = [],\n  excludeDomains: string[] = []\n): Promise<SearchResults> {\n  const apiUrl = process.env.SEARXNG_API_URL\n  if (!apiUrl) {\n    throw new Error('SEARXNG_API_URL is not set in the environment variables')\n  }\n\n  try {\n    // Construct the URL with query parameters\n    const url = new URL(`${apiUrl}/search`)\n    url.searchParams.append('q', query)\n    url.searchParams.append('format', 'json')\n    url.searchParams.append('categories', 'general,images')\n\n    // Apply search depth settings\n    if (searchDepth === 'advanced') {\n      url.searchParams.append('time_range', '')\n      url.searchParams.append('safesearch', '0')\n      url.searchParams.append('engines', 'google,bing,duckduckgo,wikipedia')\n    } else {\n      url.searchParams.append('time_range', 'year')\n      url.searchParams.append('safesearch', '1')\n      url.searchParams.append('engines', 'google,bing')\n    }\n\n    // Fetch results from SearXNG\n    const response = await fetch(url.toString(), {\n      method: 'GET',\n      headers: {\n        Accept: 'application/json'\n      }\n    })\n\n    if (!response.ok) {\n      const errorText = await response.text()\n      console.error(`SearXNG API error (${response.status}):`, errorText)\n      throw new Error(\n        `SearXNG API error: ${response.status} ${response.statusText} - ${errorText}`\n      )\n    }\n\n    const data: SearXNGResponse = await response.json()\n\n    // Separate general results and image results, and limit to maxResults\n    const generalResults = data.results\n      .filter(result => !result.img_src)\n      .slice(0, maxResults)\n    const imageResults = data.results\n      .filter(result => result.img_src)\n      .slice(0, maxResults)\n\n    // Format the results to match the expected SearchResults structure\n    return {\n      results: generalResults.map(\n        (result: SearXNGResult): SearchResultItem => ({\n          title: result.title,\n          url: result.url,\n          content: result.content\n        })\n      ),\n      query: data.query,\n      images: imageResults\n        .map(result => {\n          const imgSrc = result.img_src || ''\n          return imgSrc.startsWith('http') ? imgSrc : `${apiUrl}${imgSrc}`\n        })\n        .filter(Boolean),\n      number_of_results: data.number_of_results\n    }\n  } catch (error) {\n    console.error('SearXNG API error:', error)\n    throw error\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1366, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1372, "column": 0}, "map": {"version":3,"sources":["file:///home/ubuntu/searchBasedRAG/lib/streaming/parse-tool-call.ts"],"sourcesContent":["import { z } from 'zod'\n\nexport interface ToolCall<T = unknown> {\n  tool: string\n  parameters?: T\n}\n\nfunction getTagContent(xml: string, tag: string): string {\n  const match = xml.match(new RegExp(`<${tag}>(.*?)</${tag}>`, 's'))\n  return match ? match[1].trim() : ''\n}\n\nexport function parseToolCallXml<T>(\n  xml: string,\n  schema?: z.ZodType<T>\n): ToolCall<T> {\n  const toolCallContent = getTagContent(xml, 'tool_call')\n  if (!toolCallContent) {\n    console.warn('No tool_call tag found in response')\n    return { tool: '' }\n  }\n\n  const tool = getTagContent(toolCallContent, 'tool')\n  if (!tool) return { tool: '' }\n\n  const parametersXml = getTagContent(toolCallContent, 'parameters')\n  if (!parametersXml || !schema) return { tool }\n\n  try {\n    // Extract all parameter values using tag names from schema\n    const rawParameters: Record<string, string> = {}\n    if (schema instanceof z.ZodObject) {\n      Object.keys(schema.shape).forEach(key => {\n        const value = getTagContent(parametersXml, key)\n        if (value) rawParameters[key] = value\n      })\n    }\n\n    // Parse parameters using the provided schema\n    const parameters = schema.parse({\n      ...rawParameters,\n      // Convert comma-separated strings to arrays for array fields with default empty arrays\n      include_domains:\n        rawParameters.include_domains\n          ?.split(',')\n          .map(d => d.trim())\n          .filter(Boolean) ?? [],\n      exclude_domains:\n        rawParameters.exclude_domains\n          ?.split(',')\n          .map(d => d.trim())\n          .filter(Boolean) ?? [],\n      // Convert string to number for numeric fields\n      max_results: rawParameters.max_results\n        ? parseInt(rawParameters.max_results, 10)\n        : undefined\n    })\n\n    return { tool, parameters }\n  } catch (error) {\n    console.error('Failed to parse parameters:', error)\n    return { tool }\n  }\n}\n"],"names":[],"mappings":";;;AAAA;;AAOA,SAAS,cAAc,GAAW,EAAE,GAAW;IAC7C,MAAM,QAAQ,IAAI,KAAK,CAAC,IAAI,OAAO,CAAC,CAAC,EAAE,IAAI,QAAQ,EAAE,IAAI,CAAC,CAAC,EAAE;IAC7D,OAAO,QAAQ,KAAK,CAAC,EAAE,CAAC,IAAI,KAAK;AACnC;AAEO,SAAS,iBACd,GAAW,EACX,MAAqB;IAErB,MAAM,kBAAkB,cAAc,KAAK;IAC3C,IAAI,CAAC,iBAAiB;QACpB,QAAQ,IAAI,CAAC;QACb,OAAO;YAAE,MAAM;QAAG;IACpB;IAEA,MAAM,OAAO,cAAc,iBAAiB;IAC5C,IAAI,CAAC,MAAM,OAAO;QAAE,MAAM;IAAG;IAE7B,MAAM,gBAAgB,cAAc,iBAAiB;IACrD,IAAI,CAAC,iBAAiB,CAAC,QAAQ,OAAO;QAAE;IAAK;IAE7C,IAAI;QACF,2DAA2D;QAC3D,MAAM,gBAAwC,CAAC;QAC/C,IAAI,kBAAkB,sIAAA,CAAA,IAAC,CAAC,SAAS,EAAE;YACjC,OAAO,IAAI,CAAC,OAAO,KAAK,EAAE,OAAO,CAAC,CAAA;gBAChC,MAAM,QAAQ,cAAc,eAAe;gBAC3C,IAAI,OAAO,aAAa,CAAC,IAAI,GAAG;YAClC;QACF;QAEA,6CAA6C;QAC7C,MAAM,aAAa,OAAO,KAAK,CAAC;YAC9B,GAAG,aAAa;YAChB,uFAAuF;YACvF,iBACE,cAAc,eAAe,EACzB,MAAM,KACP,IAAI,CAAA,IAAK,EAAE,IAAI,IACf,OAAO,YAAY,EAAE;YAC1B,iBACE,cAAc,eAAe,EACzB,MAAM,KACP,IAAI,CAAA,IAAK,EAAE,IAAI,IACf,OAAO,YAAY,EAAE;YAC1B,8CAA8C;YAC9C,aAAa,cAAc,WAAW,GAClC,SAAS,cAAc,WAAW,EAAE,MACpC;QACN;QAEA,OAAO;YAAE;YAAM;QAAW;IAC5B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,OAAO;YAAE;QAAK;IAChB;AACF","debugId":null}},
    {"offset": {"line": 1426, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1432, "column": 0}, "map": {"version":3,"sources":["file:///home/ubuntu/searchBasedRAG/lib/streaming/tool-execution.ts"],"sourcesContent":["import {\n  CoreMessage,\n  DataStreamWriter,\n  generateId,\n  generateText,\n  JSONValue\n} from 'ai'\nimport { z } from 'zod'\nimport { searchSchema } from '../schema/search'\nimport { search } from '../tools/search'\nimport { ExtendedCoreMessage } from '../types'\nimport { getModel } from '../utils/registry'\nimport { parseToolCallXml } from './parse-tool-call'\n\ninterface ToolExecutionResult {\n  toolCallDataAnnotation: ExtendedCoreMessage | null\n  toolCallMessages: CoreMessage[]\n}\n\nexport async function executeToolCall(\n  coreMessages: CoreMessage[],\n  dataStream: DataStreamWriter,\n  model: string,\n  searchMode: boolean\n): Promise<ToolExecutionResult> {\n  // If search mode is disabled, return empty tool call\n  if (!searchMode) {\n    return { toolCallDataAnnotation: null, toolCallMessages: [] }\n  }\n\n  // Convert Zod schema to string representation\n  const searchSchemaString = Object.entries(searchSchema.shape)\n    .map(([key, value]) => {\n      const description = value.description\n      const isOptional = value instanceof z.ZodOptional\n      return `- ${key}${isOptional ? ' (optional)' : ''}: ${description}`\n    })\n    .join('\\n')\n  const defaultMaxResults = model?.includes('ollama') ? 5 : 20\n\n  // Generate tool selection using XML format\n  const toolSelectionResponse = await generateText({\n    model: getModel(model),\n    system: `You are an intelligent assistant that analyzes conversations to select the most appropriate tools and their parameters.\n            You excel at understanding context to determine when and how to use available tools, including crafting effective search queries.\n            Current date: ${new Date().toISOString().split('T')[0]}\n\n            Do not include any other text in your response.\n            Respond in XML format with the following structure:\n            <tool_call>\n              <tool>tool_name</tool>\n              <parameters>\n                <query>search query text</query>\n                <max_results>number - ${defaultMaxResults} by default</max_results>\n                <search_depth>basic or advanced</search_depth>\n                <include_domains>domain1,domain2</include_domains>\n                <exclude_domains>domain1,domain2</exclude_domains>\n              </parameters>\n            </tool_call>\n\n            Available tools: search\n\n            Search parameters:\n            ${searchSchemaString}\n\n            If you don't need a tool, respond with <tool_call><tool></tool></tool_call>`,\n    messages: coreMessages\n  })\n\n  // Parse the tool selection XML using the search schema\n  const toolCall = parseToolCallXml(toolSelectionResponse.text, searchSchema)\n\n  if (!toolCall || toolCall.tool === '') {\n    return { toolCallDataAnnotation: null, toolCallMessages: [] }\n  }\n\n  const toolCallAnnotation = {\n    type: 'tool_call',\n    data: {\n      state: 'call',\n      toolCallId: `call_${generateId()}`,\n      toolName: toolCall.tool,\n      args: JSON.stringify(toolCall.parameters)\n    }\n  }\n  dataStream.writeData(toolCallAnnotation)\n\n  // Support for search tool only for now\n  const searchResults = await search(\n    toolCall.parameters?.query ?? '',\n    toolCall.parameters?.max_results,\n    toolCall.parameters?.search_depth as 'basic' | 'advanced',\n    toolCall.parameters?.include_domains ?? [],\n    toolCall.parameters?.exclude_domains ?? []\n  )\n\n  const updatedToolCallAnnotation = {\n    ...toolCallAnnotation,\n    data: {\n      ...toolCallAnnotation.data,\n      result: JSON.stringify(searchResults),\n      state: 'result'\n    }\n  }\n  dataStream.writeMessageAnnotation(updatedToolCallAnnotation)\n\n  const toolCallDataAnnotation: ExtendedCoreMessage = {\n    role: 'data',\n    content: {\n      type: 'tool_call',\n      data: updatedToolCallAnnotation.data\n    } as JSONValue\n  }\n\n  const toolCallMessages: CoreMessage[] = [\n    {\n      role: 'assistant',\n      content: `Tool call result: ${JSON.stringify(searchResults)}`\n    },\n    {\n      role: 'user',\n      content: 'Now answer the user question.'\n    }\n  ]\n\n  return { toolCallDataAnnotation, toolCallMessages }\n}\n"],"names":[],"mappings":";;;AAAA;AAAA;AAOA;AACA;AACA;AAEA;AACA;;;;;;;AAOO,eAAe,gBACpB,YAA2B,EAC3B,UAA4B,EAC5B,KAAa,EACb,UAAmB;IAEnB,qDAAqD;IACrD,IAAI,CAAC,YAAY;QACf,OAAO;YAAE,wBAAwB;YAAM,kBAAkB,EAAE;QAAC;IAC9D;IAEA,8CAA8C;IAC9C,MAAM,qBAAqB,OAAO,OAAO,CAAC,0HAAA,CAAA,eAAY,CAAC,KAAK,EACzD,GAAG,CAAC,CAAC,CAAC,KAAK,MAAM;QAChB,MAAM,cAAc,MAAM,WAAW;QACrC,MAAM,aAAa,iBAAiB,sIAAA,CAAA,IAAC,CAAC,WAAW;QACjD,OAAO,CAAC,EAAE,EAAE,MAAM,aAAa,gBAAgB,GAAG,EAAE,EAAE,aAAa;IACrE,GACC,IAAI,CAAC;IACR,MAAM,oBAAoB,OAAO,SAAS,YAAY,IAAI;IAE1D,2CAA2C;IAC3C,MAAM,wBAAwB,MAAM,CAAA,GAAA,sJAAA,CAAA,eAAY,AAAD,EAAE;QAC/C,OAAO,CAAA,GAAA,0HAAA,CAAA,WAAQ,AAAD,EAAE;QAChB,QAAQ,CAAC;;0BAEa,EAAE,IAAI,OAAO,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC;;;;;;;;sCAQ7B,EAAE,kBAAkB;;;;;;;;;;YAU9C,EAAE,mBAAmB;;uFAEsD,CAAC;QACpF,UAAU;IACZ;IAEA,uDAAuD;IACvD,MAAM,WAAW,CAAA,GAAA,2IAAA,CAAA,mBAAgB,AAAD,EAAE,sBAAsB,IAAI,EAAE,0HAAA,CAAA,eAAY;IAE1E,IAAI,CAAC,YAAY,SAAS,IAAI,KAAK,IAAI;QACrC,OAAO;YAAE,wBAAwB;YAAM,kBAAkB,EAAE;QAAC;IAC9D;IAEA,MAAM,qBAAqB;QACzB,MAAM;QACN,MAAM;YACJ,OAAO;YACP,YAAY,CAAC,KAAK,EAAE,CAAA,GAAA,0LAAA,CAAA,aAAU,AAAD,KAAK;YAClC,UAAU,SAAS,IAAI;YACvB,MAAM,KAAK,SAAS,CAAC,SAAS,UAAU;QAC1C;IACF;IACA,WAAW,SAAS,CAAC;IAErB,uCAAuC;IACvC,MAAM,gBAAgB,MAAM,CAAA,GAAA,wHAAA,CAAA,SAAM,AAAD,EAC/B,SAAS,UAAU,EAAE,SAAS,IAC9B,SAAS,UAAU,EAAE,aACrB,SAAS,UAAU,EAAE,cACrB,SAAS,UAAU,EAAE,mBAAmB,EAAE,EAC1C,SAAS,UAAU,EAAE,mBAAmB,EAAE;IAG5C,MAAM,4BAA4B;QAChC,GAAG,kBAAkB;QACrB,MAAM;YACJ,GAAG,mBAAmB,IAAI;YAC1B,QAAQ,KAAK,SAAS,CAAC;YACvB,OAAO;QACT;IACF;IACA,WAAW,sBAAsB,CAAC;IAElC,MAAM,yBAA8C;QAClD,MAAM;QACN,SAAS;YACP,MAAM;YACN,MAAM,0BAA0B,IAAI;QACtC;IACF;IAEA,MAAM,mBAAkC;QACtC;YACE,MAAM;YACN,SAAS,CAAC,kBAAkB,EAAE,KAAK,SAAS,CAAC,gBAAgB;QAC/D;QACA;YACE,MAAM;YACN,SAAS;QACX;KACD;IAED,OAAO;QAAE;QAAwB;IAAiB;AACpD","debugId":null}},
    {"offset": {"line": 1542, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1548, "column": 0}, "map": {"version":3,"sources":["file:///home/ubuntu/searchBasedRAG/lib/streaming/create-manual-tool-stream.ts"],"sourcesContent":["import {\n  convertToCoreMessages,\n  createDataStreamResponse,\n  DataStreamWriter,\n  JSONValue,\n  streamText\n} from 'ai'\nimport { manualResearcher } from '../agents/manual-researcher'\nimport { ExtendedCoreMessage } from '../types'\nimport { getMaxAllowedTokens, truncateMessages } from '../utils/context-window'\nimport { handleStreamFinish } from './handle-stream-finish'\nimport { executeToolCall } from './tool-execution'\nimport { BaseStreamConfig } from './types'\n\nexport function createManualToolStreamResponse(config: BaseStreamConfig) {\n  return createDataStreamResponse({\n    execute: async (dataStream: DataStreamWriter) => {\n      const { messages, model, chatId, searchMode } = config\n      const modelId = `${model.providerId}:${model.id}`\n      let toolCallModelId = model.toolCallModel\n        ? `${model.providerId}:${model.toolCallModel}`\n        : modelId\n\n      try {\n        const coreMessages = convertToCoreMessages(messages)\n        const truncatedMessages = truncateMessages(\n          coreMessages,\n          getMaxAllowedTokens(model)\n        )\n\n        const { toolCallDataAnnotation, toolCallMessages } =\n          await executeToolCall(\n            truncatedMessages,\n            dataStream,\n            toolCallModelId,\n            searchMode\n          )\n\n        const researcherConfig = manualResearcher({\n          messages: [...truncatedMessages, ...toolCallMessages],\n          model: modelId,\n          isSearchEnabled: searchMode\n        })\n\n        // Variables to track the reasoning timing.\n        let reasoningStartTime: number | null = null\n        let reasoningDuration: number | null = null\n\n        const result = streamText({\n          ...researcherConfig,\n          onFinish: async result => {\n            const annotations: ExtendedCoreMessage[] = [\n              ...(toolCallDataAnnotation ? [toolCallDataAnnotation] : []),\n              {\n                role: 'data',\n                content: {\n                  type: 'reasoning',\n                  data: {\n                    time: reasoningDuration ?? 0,\n                    reasoning: result.reasoning\n                  }\n                } as JSONValue\n              }\n            ]\n\n            await handleStreamFinish({\n              responseMessages: result.response.messages,\n              originalMessages: messages,\n              model: modelId,\n              chatId,\n              dataStream,\n              skipRelatedQuestions: true,\n              annotations\n            })\n          },\n          onChunk(event) {\n            const chunkType = event.chunk?.type\n\n            if (chunkType === 'reasoning') {\n              if (reasoningStartTime === null) {\n                reasoningStartTime = Date.now()\n              }\n            } else {\n              if (reasoningStartTime !== null) {\n                const elapsedTime = Date.now() - reasoningStartTime\n                reasoningDuration = elapsedTime\n                dataStream.writeMessageAnnotation({\n                  type: 'reasoning',\n                  data: { time: elapsedTime }\n                } as JSONValue)\n                reasoningStartTime = null\n              }\n            }\n          }\n        })\n\n        result.mergeIntoDataStream(dataStream, {\n          sendReasoning: true\n        })\n      } catch (error) {\n        console.error('Stream execution error:', error)\n      }\n    },\n    onError: error => {\n      console.error('Stream error:', error)\n      return error instanceof Error ? error.message : String(error)\n    }\n  })\n}\n"],"names":[],"mappings":";;;AAAA;AAOA;AAEA;AACA;AACA;;;;;;AAGO,SAAS,+BAA+B,MAAwB;IACrE,OAAO,CAAA,GAAA,sJAAA,CAAA,2BAAwB,AAAD,EAAE;QAC9B,SAAS,OAAO;YACd,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,EAAE,UAAU,EAAE,GAAG;YAChD,MAAM,UAAU,GAAG,MAAM,UAAU,CAAC,CAAC,EAAE,MAAM,EAAE,EAAE;YACjD,IAAI,kBAAkB,MAAM,aAAa,GACrC,GAAG,MAAM,UAAU,CAAC,CAAC,EAAE,MAAM,aAAa,EAAE,GAC5C;YAEJ,IAAI;gBACF,MAAM,eAAe,CAAA,GAAA,sJAAA,CAAA,wBAAqB,AAAD,EAAE;gBAC3C,MAAM,oBAAoB,CAAA,GAAA,mIAAA,CAAA,mBAAgB,AAAD,EACvC,cACA,CAAA,GAAA,mIAAA,CAAA,sBAAmB,AAAD,EAAE;gBAGtB,MAAM,EAAE,sBAAsB,EAAE,gBAAgB,EAAE,GAChD,MAAM,CAAA,GAAA,uIAAA,CAAA,kBAAe,AAAD,EAClB,mBACA,YACA,iBACA;gBAGJ,MAAM,mBAAmB,CAAA,GAAA,uIAAA,CAAA,mBAAgB,AAAD,EAAE;oBACxC,UAAU;2BAAI;2BAAsB;qBAAiB;oBACrD,OAAO;oBACP,iBAAiB;gBACnB;gBAEA,2CAA2C;gBAC3C,IAAI,qBAAoC;gBACxC,IAAI,oBAAmC;gBAEvC,MAAM,SAAS,CAAA,GAAA,sJAAA,CAAA,aAAU,AAAD,EAAE;oBACxB,GAAG,gBAAgB;oBACnB,UAAU,OAAM;wBACd,MAAM,cAAqC;+BACrC,yBAAyB;gCAAC;6BAAuB,GAAG,EAAE;4BAC1D;gCACE,MAAM;gCACN,SAAS;oCACP,MAAM;oCACN,MAAM;wCACJ,MAAM,qBAAqB;wCAC3B,WAAW,OAAO,SAAS;oCAC7B;gCACF;4BACF;yBACD;wBAED,MAAM,CAAA,GAAA,gJAAA,CAAA,qBAAkB,AAAD,EAAE;4BACvB,kBAAkB,OAAO,QAAQ,CAAC,QAAQ;4BAC1C,kBAAkB;4BAClB,OAAO;4BACP;4BACA;4BACA,sBAAsB;4BACtB;wBACF;oBACF;oBACA,SAAQ,KAAK;wBACX,MAAM,YAAY,MAAM,KAAK,EAAE;wBAE/B,IAAI,cAAc,aAAa;4BAC7B,IAAI,uBAAuB,MAAM;gCAC/B,qBAAqB,KAAK,GAAG;4BAC/B;wBACF,OAAO;4BACL,IAAI,uBAAuB,MAAM;gCAC/B,MAAM,cAAc,KAAK,GAAG,KAAK;gCACjC,oBAAoB;gCACpB,WAAW,sBAAsB,CAAC;oCAChC,MAAM;oCACN,MAAM;wCAAE,MAAM;oCAAY;gCAC5B;gCACA,qBAAqB;4BACvB;wBACF;oBACF;gBACF;gBAEA,OAAO,mBAAmB,CAAC,YAAY;oBACrC,eAAe;gBACjB;YACF,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,2BAA2B;YAC3C;QACF;QACA,SAAS,CAAA;YACP,QAAQ,KAAK,CAAC,iBAAiB;YAC/B,OAAO,iBAAiB,QAAQ,MAAM,OAAO,GAAG,OAAO;QACzD;IACF;AACF","debugId":null}},
    {"offset": {"line": 1644, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1650, "column": 0}, "map": {"version":3,"sources":["file:///home/ubuntu/searchBasedRAG/lib/schema/retrieve.tsx"],"sourcesContent":["import { DeepPartial } from 'ai'\nimport { z } from 'zod'\n\nexport const retrieveSchema = z.object({\n  url: z.string().describe('The url to retrieve')\n})\n\nexport type PartialInquiry = DeepPartial<typeof retrieveSchema>\n"],"names":[],"mappings":";;;AACA;;AAEO,MAAM,iBAAiB,sIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACrC,KAAK,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC3B","debugId":null}},
    {"offset": {"line": 1658, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1664, "column": 0}, "map": {"version":3,"sources":["file:///home/ubuntu/searchBasedRAG/lib/tools/retrieve.ts"],"sourcesContent":["import { tool } from 'ai'\nimport { retrieveSchema } from '@/lib/schema/retrieve'\nimport { SearchResults as SearchResultsType } from '@/lib/types'\n\nconst CONTENT_CHARACTER_LIMIT = 10000\n\nasync function fetchJinaReaderData(\n  url: string\n): Promise<SearchResultsType | null> {\n  try {\n    const response = await fetch(`https://r.jina.ai/${url}`, {\n      method: 'GET',\n      headers: {\n        Accept: 'application/json',\n        'X-With-Generated-Alt': 'true'\n      }\n    })\n    const json = await response.json()\n    if (!json.data || json.data.length === 0) {\n      return null\n    }\n\n    const content = json.data.content.slice(0, CONTENT_CHARACTER_LIMIT)\n\n    return {\n      results: [\n        {\n          title: json.data.title,\n          content,\n          url: json.data.url\n        }\n      ],\n      query: '',\n      images: []\n    }\n  } catch (error) {\n    console.error('Jina Reader API error:', error)\n    return null\n  }\n}\n\nasync function fetchTavilyExtractData(\n  url: string\n): Promise<SearchResultsType | null> {\n  try {\n    const apiKey = process.env.TAVILY_API_KEY\n    const response = await fetch('https://api.tavily.com/extract', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ api_key: apiKey, urls: [url] })\n    })\n    const json = await response.json()\n    if (!json.results || json.results.length === 0) {\n      return null\n    }\n\n    const result = json.results[0]\n    const content = result.raw_content.slice(0, CONTENT_CHARACTER_LIMIT)\n\n    return {\n      results: [\n        {\n          title: content.slice(0, 100),\n          content,\n          url: result.url\n        }\n      ],\n      query: '',\n      images: []\n    }\n  } catch (error) {\n    console.error('Tavily Extract API error:', error)\n    return null\n  }\n}\n\nexport const retrieveTool = tool({\n  description: 'Retrieve content from the web',\n  parameters: retrieveSchema,\n  execute: async ({ url }) => {\n    let results: SearchResultsType | null\n\n    // Use Jina if the API key is set, otherwise use Tavily\n    const useJina = process.env.JINA_API_KEY\n    if (useJina) {\n      results = await fetchJinaReaderData(url)\n    } else {\n      results = await fetchTavilyExtractData(url)\n    }\n\n    if (!results) {\n      return null\n    }\n\n    return results\n  }\n})\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAGA,MAAM,0BAA0B;AAEhC,eAAe,oBACb,GAAW;IAEX,IAAI;QACF,MAAM,WAAW,MAAM,MAAM,CAAC,kBAAkB,EAAE,KAAK,EAAE;YACvD,QAAQ;YACR,SAAS;gBACP,QAAQ;gBACR,wBAAwB;YAC1B;QACF;QACA,MAAM,OAAO,MAAM,SAAS,IAAI;QAChC,IAAI,CAAC,KAAK,IAAI,IAAI,KAAK,IAAI,CAAC,MAAM,KAAK,GAAG;YACxC,OAAO;QACT;QAEA,MAAM,UAAU,KAAK,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG;QAE3C,OAAO;YACL,SAAS;gBACP;oBACE,OAAO,KAAK,IAAI,CAAC,KAAK;oBACtB;oBACA,KAAK,KAAK,IAAI,CAAC,GAAG;gBACpB;aACD;YACD,OAAO;YACP,QAAQ,EAAE;QACZ;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,0BAA0B;QACxC,OAAO;IACT;AACF;AAEA,eAAe,uBACb,GAAW;IAEX,IAAI;QACF,MAAM,SAAS,QAAQ,GAAG,CAAC,cAAc;QACzC,MAAM,WAAW,MAAM,MAAM,kCAAkC;YAC7D,QAAQ;YACR,SAAS;gBACP,gBAAgB;YAClB;YACA,MAAM,KAAK,SAAS,CAAC;gBAAE,SAAS;gBAAQ,MAAM;oBAAC;iBAAI;YAAC;QACtD;QACA,MAAM,OAAO,MAAM,SAAS,IAAI;QAChC,IAAI,CAAC,KAAK,OAAO,IAAI,KAAK,OAAO,CAAC,MAAM,KAAK,GAAG;YAC9C,OAAO;QACT;QAEA,MAAM,SAAS,KAAK,OAAO,CAAC,EAAE;QAC9B,MAAM,UAAU,OAAO,WAAW,CAAC,KAAK,CAAC,GAAG;QAE5C,OAAO;YACL,SAAS;gBACP;oBACE,OAAO,QAAQ,KAAK,CAAC,GAAG;oBACxB;oBACA,KAAK,OAAO,GAAG;gBACjB;aACD;YACD,OAAO;YACP,QAAQ,EAAE;QACZ;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,OAAO;IACT;AACF;AAEO,MAAM,eAAe,CAAA,GAAA,sJAAA,CAAA,OAAI,AAAD,EAAE;IAC/B,aAAa;IACb,YAAY,4HAAA,CAAA,iBAAc;IAC1B,SAAS,OAAO,EAAE,GAAG,EAAE;QACrB,IAAI;QAEJ,uDAAuD;QACvD,MAAM,UAAU,QAAQ,GAAG,CAAC,YAAY;QACxC,IAAI,SAAS;YACX,UAAU,MAAM,oBAAoB;QACtC,OAAO;YACL,UAAU,MAAM,uBAAuB;QACzC;QAEA,IAAI,CAAC,SAAS;YACZ,OAAO;QACT;QAEA,OAAO;IACT;AACF","debugId":null}},
    {"offset": {"line": 1757, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1763, "column": 0}, "map": {"version":3,"sources":["file:///home/ubuntu/searchBasedRAG/lib/tools/video-search.ts"],"sourcesContent":["import { tool } from 'ai'\nimport { searchSchema } from '@/lib/schema/search'\n\nexport const videoSearchTool = tool({\n  description: 'Search for videos from YouTube',\n  parameters: searchSchema,\n  execute: async ({ query }) => {\n    try {\n      const response = await fetch('https://google.serper.dev/videos', {\n        method: 'POST',\n        headers: {\n          'X-API-KEY': process.env.SERPER_API_KEY || '',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ q: query })\n      })\n\n      if (!response.ok) {\n        throw new Error('Network response was not ok')\n      }\n\n      return await response.json()\n    } catch (error) {\n      console.error('Video Search API error:', error)\n      return null\n    }\n  }\n})\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,MAAM,kBAAkB,CAAA,GAAA,sJAAA,CAAA,OAAI,AAAD,EAAE;IAClC,aAAa;IACb,YAAY,0HAAA,CAAA,eAAY;IACxB,SAAS,OAAO,EAAE,KAAK,EAAE;QACvB,IAAI;YACF,MAAM,WAAW,MAAM,MAAM,oCAAoC;gBAC/D,QAAQ;gBACR,SAAS;oBACP,aAAa,QAAQ,GAAG,CAAC,cAAc,IAAI;oBAC3C,gBAAgB;gBAClB;gBACA,MAAM,KAAK,SAAS,CAAC;oBAAE,GAAG;gBAAM;YAClC;YAEA,IAAI,CAAC,SAAS,EAAE,EAAE;gBAChB,MAAM,IAAI,MAAM;YAClB;YAEA,OAAO,MAAM,SAAS,IAAI;QAC5B,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,2BAA2B;YACzC,OAAO;QACT;IACF;AACF","debugId":null}},
    {"offset": {"line": 1795, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1801, "column": 0}, "map": {"version":3,"sources":["file:///home/ubuntu/searchBasedRAG/lib/agents/researcher.ts"],"sourcesContent":["import { CoreMessage, smoothStream, streamText } from 'ai'\nimport { retrieveTool } from '../tools/retrieve'\nimport { searchTool } from '../tools/search'\nimport { videoSearchTool } from '../tools/video-search'\nimport { getModel } from '../utils/registry'\n\nconst SYSTEM_PROMPT = `\nInstructions:\n\nYou are a helpful AI assistant with access to real-time web search, content retrieval, and video search capabilities.\nWhen asked a question, you should:\n1. Search for relevant information using the search tool when needed\n2. Use the retrieve tool to get detailed content from specific URLs\n3. Use the video search tool when looking for video content\n4. Analyze all search results to provide accurate, up-to-date information\n5. Always cite sources using the [number](url) format, matching the order of search results. If multiple sources are relevant, include all of them, and comma separate them. Only use information that has a URL available for citation.\n6. If results are not relevant or helpful, rely on your general knowledge\n7. Provide comprehensive and detailed responses based on search results, ensuring thorough coverage of the user's question\n8. Use markdown to structure your responses. Use headings to break up the content into sections.\n9. **Use the retrieve tool only with user-provided URLs.**\n\nCitation Format:\n[number](url)\n`\n\ntype ResearcherReturn = Parameters<typeof streamText>[0]\n\nexport function researcher({\n  messages,\n  model,\n  searchMode\n}: {\n  messages: CoreMessage[]\n  model: string\n  searchMode: boolean\n}): ResearcherReturn {\n  try {\n    const currentDate = new Date().toLocaleString()\n\n    return {\n      model: getModel(model),\n      system: `${SYSTEM_PROMPT}\\nCurrent date and time: ${currentDate}`,\n      messages,\n      tools: {\n        search: searchTool,\n        retrieve: retrieveTool,\n        videoSearch: videoSearchTool\n      },\n      experimental_activeTools: searchMode\n        ? ['search', 'retrieve', 'videoSearch']\n        : [],\n      maxSteps: searchMode ? 5 : 1,\n      experimental_transform: smoothStream({ chunking: 'word' })\n    }\n  } catch (error) {\n    console.error('Error in chatResearcher:', error)\n    throw error\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;;;;;;AAEA,MAAM,gBAAgB,CAAC;;;;;;;;;;;;;;;;;AAiBvB,CAAC;AAIM,SAAS,WAAW,EACzB,QAAQ,EACR,KAAK,EACL,UAAU,EAKX;IACC,IAAI;QACF,MAAM,cAAc,IAAI,OAAO,cAAc;QAE7C,OAAO;YACL,OAAO,CAAA,GAAA,0HAAA,CAAA,WAAQ,AAAD,EAAE;YAChB,QAAQ,GAAG,cAAc,yBAAyB,EAAE,aAAa;YACjE;YACA,OAAO;gBACL,QAAQ,wHAAA,CAAA,aAAU;gBAClB,UAAU,0HAAA,CAAA,eAAY;gBACtB,aAAa,iIAAA,CAAA,kBAAe;YAC9B;YACA,0BAA0B,aACtB;gBAAC;gBAAU;gBAAY;aAAc,GACrC,EAAE;YACN,UAAU,aAAa,IAAI;YAC3B,wBAAwB,CAAA,GAAA,sJAAA,CAAA,eAAY,AAAD,EAAE;gBAAE,UAAU;YAAO;QAC1D;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,MAAM;IACR;AACF","debugId":null}},
    {"offset": {"line": 1859, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1865, "column": 0}, "map": {"version":3,"sources":["file:///home/ubuntu/searchBasedRAG/lib/streaming/create-tool-calling-stream.ts"],"sourcesContent":["import { researcher } from '@/lib/agents/researcher'\nimport {\n  convertToCoreMessages,\n  createDataStreamResponse,\n  DataStreamWriter,\n  streamText\n} from 'ai'\nimport { getMaxAllowedTokens, truncateMessages } from '../utils/context-window'\nimport { isReasoningModel } from '../utils/registry'\nimport { handleStreamFinish } from './handle-stream-finish'\nimport { BaseStreamConfig } from './types'\n\nexport function createToolCallingStreamResponse(config: BaseStreamConfig) {\n  return createDataStreamResponse({\n    execute: async (dataStream: DataStreamWriter) => {\n      const { messages, model, chatId, searchMode } = config\n      const modelId = `${model.providerId}:${model.id}`\n\n      try {\n        const coreMessages = convertToCoreMessages(messages)\n        const truncatedMessages = truncateMessages(\n          coreMessages,\n          getMaxAllowedTokens(model)\n        )\n\n        let researcherConfig = await researcher({\n          messages: truncatedMessages,\n          model: modelId,\n          searchMode\n        })\n\n        const result = streamText({\n          ...researcherConfig,\n          onFinish: async result => {\n            await handleStreamFinish({\n              responseMessages: result.response.messages,\n              originalMessages: messages,\n              model: modelId,\n              chatId,\n              dataStream,\n              skipRelatedQuestions: isReasoningModel(modelId)\n            })\n          }\n        })\n\n        result.mergeIntoDataStream(dataStream)\n      } catch (error) {\n        console.error('Stream execution error:', error)\n        throw error\n      }\n    },\n    onError: error => {\n      console.error('Stream error:', error)\n      return error instanceof Error ? error.message : String(error)\n    }\n  })\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AAMA;AACA;AACA;;;;;;AAGO,SAAS,gCAAgC,MAAwB;IACtE,OAAO,CAAA,GAAA,sJAAA,CAAA,2BAAwB,AAAD,EAAE;QAC9B,SAAS,OAAO;YACd,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,EAAE,UAAU,EAAE,GAAG;YAChD,MAAM,UAAU,GAAG,MAAM,UAAU,CAAC,CAAC,EAAE,MAAM,EAAE,EAAE;YAEjD,IAAI;gBACF,MAAM,eAAe,CAAA,GAAA,sJAAA,CAAA,wBAAqB,AAAD,EAAE;gBAC3C,MAAM,oBAAoB,CAAA,GAAA,mIAAA,CAAA,mBAAgB,AAAD,EACvC,cACA,CAAA,GAAA,mIAAA,CAAA,sBAAmB,AAAD,EAAE;gBAGtB,IAAI,mBAAmB,MAAM,CAAA,GAAA,6HAAA,CAAA,aAAU,AAAD,EAAE;oBACtC,UAAU;oBACV,OAAO;oBACP;gBACF;gBAEA,MAAM,SAAS,CAAA,GAAA,sJAAA,CAAA,aAAU,AAAD,EAAE;oBACxB,GAAG,gBAAgB;oBACnB,UAAU,OAAM;wBACd,MAAM,CAAA,GAAA,gJAAA,CAAA,qBAAkB,AAAD,EAAE;4BACvB,kBAAkB,OAAO,QAAQ,CAAC,QAAQ;4BAC1C,kBAAkB;4BAClB,OAAO;4BACP;4BACA;4BACA,sBAAsB,CAAA,GAAA,0HAAA,CAAA,mBAAgB,AAAD,EAAE;wBACzC;oBACF;gBACF;gBAEA,OAAO,mBAAmB,CAAC;YAC7B,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,2BAA2B;gBACzC,MAAM;YACR;QACF;QACA,SAAS,CAAA;YACP,QAAQ,KAAK,CAAC,iBAAiB;YAC/B,OAAO,iBAAiB,QAAQ,MAAM,OAAO,GAAG,OAAO;QACzD;IACF;AACF","debugId":null}},
    {"offset": {"line": 1916, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1930, "column": 0}, "map": {"version":3,"sources":["file:///home/ubuntu/searchBasedRAG/app/api/chat/route.ts"],"sourcesContent":["import { createManualToolStreamResponse } from '@/lib/streaming/create-manual-tool-stream'\nimport { createToolCallingStreamResponse } from '@/lib/streaming/create-tool-calling-stream'\nimport { Model } from '@/lib/types/models'\nimport { isProviderEnabled } from '@/lib/utils/registry'\nimport { cookies } from 'next/headers'\n\nexport const maxDuration = 30\n\nconst DEFAULT_MODEL: Model = {\n  id: 'gpt-4o-mini',\n  name: 'GPT-4o mini',\n  provider: 'OpenAI',\n  providerId: 'openai',\n  enabled: true,\n  toolCallType: 'native'\n}\n\nexport async function POST(req: Request) {\n  try {\n    const { messages, id: chatId } = await req.json()\n    const referer = req.headers.get('referer')\n    const isSharePage = referer?.includes('/share/')\n\n    if (isSharePage) {\n      return new Response('Chat API is not available on share pages', {\n        status: 403,\n        statusText: 'Forbidden'\n      })\n    }\n\n    const cookieStore = await cookies()\n    const modelJson = cookieStore.get('selectedModel')?.value\n    const searchMode = cookieStore.get('search-mode')?.value === 'true'\n\n    let selectedModel = DEFAULT_MODEL\n\n    if (modelJson) {\n      try {\n        selectedModel = JSON.parse(modelJson) as Model\n      } catch (e) {\n        console.error('Failed to parse selected model:', e)\n      }\n    }\n\n    if (\n      !isProviderEnabled(selectedModel.providerId) ||\n      selectedModel.enabled === false\n    ) {\n      return new Response(\n        `Selected provider is not enabled ${selectedModel.providerId}`,\n        {\n          status: 404,\n          statusText: 'Not Found'\n        }\n      )\n    }\n\n    const supportsToolCalling = selectedModel.toolCallType === 'native'\n\n    return supportsToolCalling\n      ? createToolCallingStreamResponse({\n          messages,\n          model: selectedModel,\n          chatId,\n          searchMode\n        })\n      : createManualToolStreamResponse({\n          messages,\n          model: selectedModel,\n          chatId,\n          searchMode\n        })\n  } catch (error) {\n    console.error('API route error:', error)\n    return new Response('Error processing your request', {\n      status: 500,\n      statusText: 'Internal Server Error'\n    })\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AAEA;AACA;;;;;AAEO,MAAM,cAAc;AAE3B,MAAM,gBAAuB;IAC3B,IAAI;IACJ,MAAM;IACN,UAAU;IACV,YAAY;IACZ,SAAS;IACT,cAAc;AAChB;AAEO,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,EAAE,QAAQ,EAAE,IAAI,MAAM,EAAE,GAAG,MAAM,IAAI,IAAI;QAC/C,MAAM,UAAU,IAAI,OAAO,CAAC,GAAG,CAAC;QAChC,MAAM,cAAc,SAAS,SAAS;QAEtC,IAAI,aAAa;YACf,OAAO,IAAI,SAAS,4CAA4C;gBAC9D,QAAQ;gBACR,YAAY;YACd;QACF;QAEA,MAAM,cAAc,MAAM,CAAA,GAAA,iIAAA,CAAA,UAAO,AAAD;QAChC,MAAM,YAAY,YAAY,GAAG,CAAC,kBAAkB;QACpD,MAAM,aAAa,YAAY,GAAG,CAAC,gBAAgB,UAAU;QAE7D,IAAI,gBAAgB;QAEpB,IAAI,WAAW;YACb,IAAI;gBACF,gBAAgB,KAAK,KAAK,CAAC;YAC7B,EAAE,OAAO,GAAG;gBACV,QAAQ,KAAK,CAAC,mCAAmC;YACnD;QACF;QAEA,IACE,CAAC,CAAA,GAAA,0HAAA,CAAA,oBAAiB,AAAD,EAAE,cAAc,UAAU,KAC3C,cAAc,OAAO,KAAK,OAC1B;YACA,OAAO,IAAI,SACT,CAAC,iCAAiC,EAAE,cAAc,UAAU,EAAE,EAC9D;gBACE,QAAQ;gBACR,YAAY;YACd;QAEJ;QAEA,MAAM,sBAAsB,cAAc,YAAY,KAAK;QAE3D,OAAO,sBACH,CAAA,GAAA,yJAAA,CAAA,kCAA+B,AAAD,EAAE;YAC9B;YACA,OAAO;YACP;YACA;QACF,KACA,CAAA,GAAA,wJAAA,CAAA,iCAA8B,AAAD,EAAE;YAC7B;YACA,OAAO;YACP;YACA;QACF;IACN,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,oBAAoB;QAClC,OAAO,IAAI,SAAS,iCAAiC;YACnD,QAAQ;YACR,YAAY;QACd;IACF;AACF","debugId":null}},
    {"offset": {"line": 1999, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}